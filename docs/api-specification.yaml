openapi: 3.0.3
info:
  title: Modern Men Hair Salon API
  description: |
    Complete API specification for the Modern Men Hair Salon management system.

    ## Features
    - Customer management with loyalty programs
    - Appointment scheduling and management
    - Service catalog with pricing
    - Staff management and scheduling
    - Real-time notifications
    - Analytics and reporting

    ## Authentication
    All API endpoints require authentication via JWT tokens or session cookies.
    Include the Authorization header with your Bearer token for authenticated requests.
  version: 1.0.0
  contact:
    name: Modern Men Support
    email: support@modernmen.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.modernmen.com/v1
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - bearerAuth: []
  - cookieAuth: []

paths:
  /appointments:
    get:
      summary: Get appointments with advanced filtering
      description: |
        Retrieve appointments with comprehensive filtering, sorting, and pagination options.
        Supports role-based access control and advanced search capabilities.
      tags:
        - Appointments
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: tenant
          in: query
          description: Filter by tenant ID (for multi-tenant deployments)
          schema:
            type: string
        - name: user
          in: query
          description: Filter by customer ID
          schema:
            type: string
        - name: status
          in: query
          description: Filter by appointment status
          schema:
            type: string
            enum: [scheduled, confirmed, in-progress, completed, cancelled, no-show]
        - name: dateFrom
          in: query
          description: Filter appointments from this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: Filter appointments until this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: service
          in: query
          description: Filter by service ID
          schema:
            type: string
        - name: stylist
          in: query
          description: Filter by stylist ID
          schema:
            type: string
        - name: limit
          in: query
          description: Number of appointments per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
            enum: [createdAt, -createdAt, date, -date]
            default: -createdAt
      responses:
        '200':
          description: Successful response with appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  totalDocs:
                    type: integer
                    description: Total number of appointments
                  limit:
                    type: integer
                    description: Number of appointments per page
                  totalPages:
                    type: integer
                    description: Total number of pages
                  page:
                    type: integer
                    description: Current page number
                  pagingCounter:
                    type: integer
                    description: MongoDB-style paging counter
                  hasPrevPage:
                    type: boolean
                    description: Whether there is a previous page
                  hasNextPage:
                    type: boolean
                    description: Whether there is a next page
                  prevPage:
                    type: integer
                    description: Previous page number (null if none)
                  nextPage:
                    type: integer
                    description: Next page number (null if none)
                  meta:
                    type: object
                    properties:
                      filters:
                        type: object
                        description: Applied filters for reference
                      userRole:
                        type: string
                        description: Current user's role
                      permissions:
                        type: object
                        properties:
                          canCreate:
                            type: boolean
                          canEdit:
                            type: boolean
                          canDelete:
                            type: boolean
                          canViewAll:
                            type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new appointment
      description: |
        Create a new appointment with business logic validation including:
        - Customer existence and active status
        - Service availability
        - Stylist availability and scheduling conflicts
        - Business hours validation
      tags:
        - Appointments
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - customer
                - service
                - stylist
                - date
                - duration
                - status
              properties:
                customer:
                  type: string
                  description: Customer ID
                service:
                  type: string
                  description: Service ID
                stylist:
                  type: string
                  description: Stylist ID
                date:
                  type: string
                  format: date-time
                  description: Appointment date and time (ISO 8601)
                duration:
                  type: integer
                  minimum: 15
                  maximum: 480
                  description: Duration in minutes
                status:
                  type: string
                  enum: [scheduled, confirmed]
                  default: scheduled
                notes:
                  type: string
                  maxLength: 1000
                  description: Optional appointment notes
                price:
                  type: number
                  minimum: 0
                  description: Custom price (defaults to service price)
                tenant:
                  type: string
                  description: Tenant ID for multi-tenant deployments
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Appointment'
                  message:
                    type: string
                    example: "Appointment created successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /appointments/{id}:
    get:
      summary: Get appointment by ID
      description: Retrieve a specific appointment with full details
      tags:
        - Appointments
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Appointment ID
          schema:
            type: string
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Appointment'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    put:
      summary: Update appointment
      description: Update an existing appointment with validation
      tags:
        - Appointments
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Appointment ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date-time
                duration:
                  type: integer
                  minimum: 15
                  maximum: 480
                status:
                  type: string
                  enum: [scheduled, confirmed, in-progress, completed, cancelled, no-show]
                notes:
                  type: string
                  maxLength: 1000
                price:
                  type: number
                  minimum: 0
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Appointment'
                  message:
                    type: string
                    example: "Appointment updated successfully"

    delete:
      summary: Delete appointment
      description: Delete an appointment (soft delete with status change)
      tags:
        - Appointments
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Appointment ID
          schema:
            type: string
      responses:
        '200':
          description: Appointment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Appointment deleted successfully"

  /services:
    get:
      summary: Get services with filtering
      description: Retrieve services with advanced filtering and search capabilities
      tags:
        - Services
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: category
          in: query
          description: Filter by service category
          schema:
            type: string
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
            minimum: 0
        - name: search
          in: query
          description: Search in name, description, or category
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
            enum: [name, -name, price, -price, createdAt, -createdAt]
        - name: limit
          in: query
          description: Number of services per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  docs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  totalDocs:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  page:
                    type: integer
                  meta:
                    type: object
                    properties:
                      filters:
                        type: object
                      availableCategories:
                        type: array
                        items:
                          type: string

    post:
      summary: Create a new service
      description: Create a new service with duplicate prevention and validation
      tags:
        - Services
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - duration
                - category
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 1000
                price:
                  type: number
                  minimum: 0
                  maximum: 10000
                duration:
                  type: integer
                  minimum: 15
                  maximum: 480
                category:
                  type: string
                  minLength: 1
                  maxLength: 50
                isActive:
                  type: boolean
                  default: true
                image:
                  type: string
                  format: uri
                features:
                  type: array
                  items:
                    type: string
                tenant:
                  type: string
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Service'
                  message:
                    type: string
                    example: "Service created successfully"

  /customers:
    get:
      summary: Get customers with advanced filtering
      description: Retrieve customers with search, filtering, and pagination
      tags:
        - Customers
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: search
          in: query
          description: Search in name, email, or phone
          schema:
            type: string
        - name: status
          in: query
          description: Filter by customer status
          schema:
            type: string
            enum: [active, inactive]
        - name: loyaltyTier
          in: query
          description: Filter by loyalty tier
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
            enum: [createdAt, -createdAt, firstName, -firstName, loyaltyPoints, -loyaltyPoints]
        - name: limit
          in: query
          description: Number of customers per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  customers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  totalDocs:
                    type: integer
                  totalPages:
                    type: integer
                  page:
                    type: integer
                  hasNextPage:
                    type: boolean
                  hasPrevPage:
                    type: boolean

    post:
      summary: Create a new customer
      description: Create a new customer with validation and duplicate checking
      tags:
        - Customers
      security:
        - bearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: object
                  properties:
                    street:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    zipCode:
                      type: string
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
                  message:
                    type: string
                    example: "Customer created successfully"

  /stylists:
    get:
      summary: Get stylists with advanced filtering
      description: Retrieve stylists with comprehensive filtering and metadata
      tags:
        - Stylists
      security:
        - bearerAuth: []
        - cookieAuth: []
      parameters:
        - name: featured
          in: query
          description: Filter by featured status
          schema:
            type: boolean
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search in name or bio
          schema:
            type: string
        - name: specialization
          in: query
          description: Filter by specialization
          schema:
            type: string
        - name: minRating
          in: query
          description: Minimum rating filter
          schema:
            type: number
            minimum: 0
            maximum: 5
        - name: maxRating
          in: query
          description: Maximum rating filter
          schema:
            type: number
            minimum: 0
            maximum: 5
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
            enum: [name, -name, displayOrder, -displayOrder, rating, -rating, createdAt, -createdAt]
        - name: limit
          in: query
          description: Number of stylists per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Stylists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  stylists:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stylist'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  hasNext:
                    type: boolean
                  hasPrev:
                    type: boolean
                  meta:
                    type: object
                    properties:
                      filters:
                        type: object
                      availableSpecializations:
                        type: array
                        items:
                          type: string
                      averageRating:
                        type: number

components:
  schemas:
    Appointment:
      type: object
      properties:
        id:
          type: string
          description: Unique appointment identifier
        customer:
          $ref: '#/components/schemas/Customer'
        service:
          $ref: '#/components/schemas/Service'
        stylist:
          $ref: '#/components/schemas/Stylist'
        date:
          type: string
          format: date
          description: Appointment date
        time:
          type: string
          description: Appointment time (HH:MM format)
        duration:
          type: integer
          description: Duration in minutes
        price:
          type: number
          description: Appointment price
        status:
          type: string
          enum: [scheduled, confirmed, in-progress, completed, cancelled, no-show]
        notes:
          type: string
          description: Appointment notes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          description: User ID who created the appointment

    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique customer identifier
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
        joinDate:
          type: string
          format: date
        lastVisit:
          type: string
          format: date
        totalVisits:
          type: integer
        totalSpent:
          type: number
        averageSpent:
          type: number
        loyaltyPoints:
          type: integer
        preferredBarber:
          type: string
        preferredServices:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive, vip]
        notes:
          type: string
        avatar:
          type: string
          format: uri
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        id:
          type: string
          description: Unique service identifier
        name:
          type: string
        description:
          type: string
        price:
          type: number
        duration:
          type: integer
          description: Duration in minutes
        category:
          type: string
        isActive:
          type: boolean
        image:
          type: string
          format: uri
        features:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Stylist:
      type: object
      properties:
        id:
          type: string
          description: Unique stylist identifier
        user:
          type: string
          description: Associated user ID
        name:
          type: string
        bio:
          type: string
        profileImage:
          type: string
          format: uri
        specializations:
          type: array
          items:
            type: string
        experience:
          type: object
          properties:
            years:
              type: integer
            certifications:
              type: array
              items:
                type: string
            awards:
              type: array
              items:
                type: string
        performance:
          type: object
          properties:
            rating:
              type: number
              minimum: 0
              maximum: 5
            totalReviews:
              type: integer
            completedServices:
              type: integer
        socialMedia:
          type: object
          properties:
            instagram:
              type: string
              format: uri
            facebook:
              type: string
              format: uri
            twitter:
              type: string
              format: uri
        schedule:
          type: object
          description: Weekly availability schedule
        pricing:
          type: object
          description: Custom pricing overrides
        featured:
          type: boolean
        isActive:
          type: boolean
        displayOrder:
          type: integer
        portfolio:
          type: array
          items:
            type: string
            format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  code:
                    type: string
                    example: "UNAUTHORIZED"
                  statusCode:
                    type: integer
                    example: 401

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Insufficient permissions"
                  code:
                    type: string
                    example: "FORBIDDEN"
                  statusCode:
                    type: integer
                    example: 403

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resource not found"
                  code:
                    type: string
                    example: "NOT_FOUND"
                  statusCode:
                    type: integer
                    example: 404

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error: Email is required"
                  code:
                    type: string
                    example: "VALIDATION_ERROR"
                  statusCode:
                    type: integer
                    example: 400

    RateLimited:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rate limit exceeded"
                  code:
                    type: string
                    example: "RATE_LIMIT_EXCEEDED"
                  statusCode:
                    type: integer
                    example: 429
                  resetIn:
                    type: integer
                    description: Seconds until rate limit resets

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
                  code:
                    type: string
                    example: "INTERNAL_SERVER_ERROR"
                  statusCode:
                    type: integer
                    example: 500

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
      description: Session cookie for authenticated users
